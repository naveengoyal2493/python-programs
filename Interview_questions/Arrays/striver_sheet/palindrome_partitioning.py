"""
Palindrome Partitioning
Problem Statement: You are given a string s, partition it in such a way that every substring is a 
palindrome. Return all such palindromic partitions of s.

Note: A palindrome string is a string that reads the same backward as forward.

Example 1:

Input: s = “aab”
Output: [ ["a","a","b"], ["aa","b"] ]	
Explanation: The first  answer is generated by  making three partitions. The second answer is 
generated by making two partitions.
 

Example 2:

Input: s = “aabb”
Output: [ [“a”,”a”,”b”,”b”], [“aa”,”bb”], [“a”,”a”,”bb”], [“aa”,”b”,”b”] ] 
Explanation: See Figure
"""

def palindrome_partitioning(string):
    res = []
    part = []
    def is_pali(string, start, end):
        while start <= end:
            if string[start] != string[end]:
                return False
            start += 1
            end -= 1
        return True

    def dfs(i):
        if i >= len(string):
            res.append(part.copy())
            return

        for j in range(i, len(string)):
            if is_pali(string,i,j):
                part.append(string[i:j+1])
                dfs(j + 1)
                part.pop()
    dfs(0)
    return res

print(palindrome_partitioning("aab"))